// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model ProductGroup {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    Product     Product[]

    @@index([name])
}

model Product {
    id             String           @id @default(cuid())
    name           String           @unique
    description    String?
    productGroup   ProductGroup?    @relation(fields: [productGroupId], references: [id])
    productGroupId Int?
    ProductVariant ProductVariant[]
    VariantKeys    String[]

    @@index([name])
}

model ProductVariant {
    id                String              @id @default(cuid())
    product           Product             @relation(fields: [productId], references: [id])
    productId         String
    sku               String              @unique
    cost              Float               @default(0)
    price             Float               @default(0)
    shelfLife         Int?
    VariantAttributes VariantAttributes[]
    Stock             Stock[]
    OrderItem         OrderItem[]
    Supplier          Supplier?           @relation(fields: [supplierId], references: [id])
    supplierId        String?
}

model VariantAttributes {
    id        String         @id @default(cuid())
    variant   ProductVariant @relation(fields: [variantId], references: [id])
    variantId String
    key       String
    value     String
}

model Address {
    id             String          @id @default(cuid())
    fullAddress    String // Full address as a backup or display
    unitNumber     String? // Apartment, house, or building number
    streetName     String // Street name
    neighborhood   String? // Nama komplek (Residential complex, optional)
    rt             String? // RT (Rukun Tetangga) - Indonesia specific
    rw             String? // RW (Rukun Warga) - Indonesia specific
    kelurahan      String? // Sub-district (Indonesia specific)
    kecamatan      String? // District
    city           String // City
    region         String // Province/State
    postalCode     String? // Postal code
    country        String // Country
    additionalInfo String? // "Keterangan", any extra details
    EntityAddress  EntityAddress[]
}

//GLOBAL 
model EntityAddress {
    id String @id @default(cuid())

    entityType EntityType // ENUM to define Warehouse, Supplier, or Customer

    address     Address    @relation(fields: [addressId], references: [id])
    addressId   String
    Warehouse   Warehouse? @relation(fields: [warehouseId], references: [id])
    warehouseId String?
    Supplier    Supplier?  @relation(fields: [supplierId], references: [id])
    supplierId  String?
    Customer    Customer?  @relation(fields: [customerId], references: [id])
    customerId  String?
}

enum EntityType {
    WAREHOUSE
    SUPPLIER
    CUSTOMER
}

model Warehouse {
    id                String            @id @default(cuid())
    code              String            @unique
    name              String?
    Stock             Stock[]
    EntityAddress     EntityAddress[]
    TransferOrderFrom TransferOrder[]   @relation(name: "WarehouseFrom")
    TransferOrderTo   TransferOrder[]   @relation(name: "WarehouseTo")
    AdjustmentOrder   AdjustmentOrder[]
    PurchaseOrder     PurchaseOrder[]
}

model Stock {
    id               String         @id @default(cuid())
    productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId String
    warehouse        Warehouse      @relation(fields: [warehouseId], references: [id])
    warehouseId      String
    quantity         Int            @default(0)

    @@unique([productVariantId, warehouseId])
}

model OrderItem {
    id                String           @id @default(cuid())
    orderType         OrderType
    ProductVariant    ProductVariant   @relation(fields: [productVariantId], references: [id])
    productVariantId  String
    quantity          Int
    discount          Float?
    statusType        OrderStatus
    createAt          DateTime?        @default(now())
    onGoingAt         DateTime?
    completedAt       DateTime?
    TransferOrder     TransferOrder?   @relation(fields: [transferOrderId], references: [id])
    transferOrderId   String?
    RepackOrderFrom   RepackOrder?     @relation(name: "RepackFrom", fields: [repackOrderIdFrom], references: [id])
    repackOrderIdFrom String?
    RepackOrderTo     RepackOrder?     @relation(name: "RepackTo", fields: [repackOrderIdTo], references: [id])
    repackOrderIdTo   String?
    AdjustmentOrder   AdjustmentOrder? @relation(fields: [adjustmentOrderId], references: [id])
    adjustmentOrderId String?
    PurchaseOrder     PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId   String?
}

enum OrderType {
    PURCHASE
    TRANSFER
    REPACK
    ADJUSTMENT
    DELIVARY
}

enum OrderStatus {
    NOTSTARTED
    ONGOING
    COMPLETED
}

model TransferOrder {
    id              String      @id @default(cuid())
    orderNumber     String
    warehouseFrom   Warehouse?  @relation(name: "WarehouseFrom", fields: [warehouseIdFrom], references: [id])
    warehouseIdFrom String?
    warehouseTo     Warehouse?  @relation(name: "WarehouseTo", fields: [warehouseIdTo], references: [id])
    warehouseIdTo   String?
    OrderItem       OrderItem[]
}

model RepackOrder {
    id            String      @id @default(cuid())
    orderNumber   String
    OrderItemFrom OrderItem[] @relation(name: "RepackFrom")
    OrderItemTo   OrderItem[] @relation(name: "RepackTo")
}

enum AdjustmentType {
    STOCK_INCREASE // Manual addition (e.g., found extra stock)
    STOCK_DECREASE // Manual removal (e.g., lost items)
    DAMAGE_LOSS // Stock removed due to damage, spoilage, or expiry
    COUNT_CORRECTION // Adjustment after stock count verification
    RETURNED_GOODS // Stock returned from a customer
    SUPPLIER_RECALL // Sent back to supplier due to quality issues
    CONVERSION // Stock converted into another product (e.g., repackaging)
    DONATION // Stock removed as a donation
    THEFT_LOSS // Inventory lost due to theft
    TRANSIT_DAMAGE // Loss or damage during shipping
    OTHERS
}

model AdjustmentOrder {
    id             String          @id @default(cuid())
    orderNumber    String
    description    String? // Mandatory reason for adjustment
    adjustmentType AdjustmentType? // Enum to define type of adjustment
    warehouse      Warehouse?      @relation(fields: [warehouseId], references: [id])
    warehouseId    String?
    OrderItem      OrderItem[]
}

model Supplier {
    id            String           @id @default(cuid())
    code          String           @unique
    name          String?
    EntityAddress EntityAddress[]
    contactPerson String?
    contactNo     String?          @db.VarChar(20) // Phone number format
    email         String?          @unique
    npwp          String? // Tax number (nullable)
    termOfPayment String? // Payment terms (nullable)
    leadTime      Int? // Estimated lead time in days (nullable)
    PurchaseOrder PurchaseOrder[]
    Products      ProductVariant[]
}

model PurchaseOrder {
    id             String       @id @default(cuid())
    orderNumber    String
    contractNumber String?
    contractDate   DateTime?
    OrderItem      OrderItem[]
    Supplier       Supplier?    @relation(fields: [supplierId], references: [id])
    supplierId     String?
    Warehouse      Warehouse?   @relation(fields: [warehouseId], references: [id])
    warehouseId    String?
    ChargeRate     ChargeRate[]
    Paid           Float?
}

model ChargeRate {
    id              String        @id @default(cuid())
    OrderType       OrderType
    name            String
    percentage      Float
    PurchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
    purchaseOrderId String
}

model Customer {
    id        String          @id @default(cuid())
    name      String
    contactNo String          @db.VarChar(20) // Phone number format
    email     String          @unique
    Address   EntityAddress[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(cuid())
    name           String    @unique
    email          String?   @unique
    hashedPassword String?
    emailVerified  Boolean?
    isVerified     Boolean   @default(false)
    image          String?
    accounts       Account[]
}
