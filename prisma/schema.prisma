// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Log {
    id          Int     @id @default(autoincrement())
    description String
    recipient   String?

    orderDate DateTime

    stockChange Int

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([orderDate, description, recipient])
}

enum ModificationType {
    ADD
    EDIT
    DELETE
}

model Notification {
    id               Int              @id @default(autoincrement())
    modificationType ModificationType
    modifiedLogDesc  String?
    modifiedLogRec   String?
    modifiedLogDate  DateTime?

    User     User?   @relation(fields: [userName], references: [name])
    userName String?
}

model Product {
    id    Int    @id @default(autoincrement())
    name  String
    stock Int
    price Int

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int
    Log        Log[]

    @@index([name])
}

model Category {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    Product     Product[]

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String         @id @default(cuid())
    name           String         @unique
    email          String?        @unique
    hashedPassword String?
    isVerified     Boolean        @default(false)
    image          String?
    accounts       Account[]
    sessions       Session[]
    Log            Log[]
    Notification   Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
